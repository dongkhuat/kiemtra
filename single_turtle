#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
#include <turtlesim/Pose.h>

#include <iostream>
#include <algorithm>
using namespace std;

ros::Publisher pub;
const float PI = 3.14159265;
float rate = 100;
turtlesim::Pose current_pose;

geometry_msgs::Twist getMessage(double linear_x, double angular_z)
{
    geometry_msgs::Twist msg;
    msg.linear.x = linear_x;
    msg.angular.z = angular_z;
    return msg;
}

void poseCallback(const turtlesim::Pose::ConstPtr& msg)
{
    current_pose = *msg;
}


int main(int argc, char** argv)
{
    
    ros::init(argc, argv, "myturtle_control");
    ros::NodeHandle h;
    ros::Time start=ros::Time::now();
    pub = h.advertise<geometry_msgs::Twist>("turtle1/cmd_vel", 1000);
    ros::Subscriber sub =
        h.subscribe("/turtle1/pose", 1000, poseCallback);
    ros::Rate loopRate(rate);
for(int i = 1; i < argc;  i += 2)
{
    double x0= atof(argv[i]), y0 = atof(argv[i+1]);
    double x1=5.54444, y1=5.54444;


    const double tolerance = 1e-2;


        while (ros::ok()) 
        {
            loopRate.sleep();
            ros::spinOnce();
            cout <<"x= "<< current_pose.x <<"y= " << current_pose.y << "theta= " << current_pose.theta << endl;


            double distance = sqrt( pow(x0-current_pose.x, 2) + pow(y0-current_pose.y, 2) );
            if (distance < tolerance) {
                pub.publish(getMessage(0,0));
                break;
            }

            double dx = x0 - current_pose.x, dy = y0 - current_pose.y, theta = current_pose.theta;

            double dalpha = asin ((cos(theta)*dy-sin(theta)*dx) / distance);


            float agb = acos((cos(theta)*dx+sin(theta)*dy)/distance);
            double a;
            if (agb < PI/2) {
                a = 1;
            }
            else {
                a = -1;
            }
            geometry_msgs::Twist msg = getMessage(
                min(4*distance, 4.0)*a*4,
               a*16*dalpha);
            pub.publish(msg);
            


        }

        x1=x0;
        y1=y0;

    }
        ros::Time finish=ros::Time::now();
	ROS_INFO("Time: %f",(finish-start).toSec());
        
return 0;
}
