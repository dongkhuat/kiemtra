#include <ros/ros.h>
#include <geometry_msgs/Twist.h>
#include <turtlesim/Pose.h>
#include <turtlesim/Spawn.h>
#include <cmath>
#include <ctime>
#include <iostream>
#include <algorithm>
#include <sstream>
using namespace std;

const float PI = 3.14159265;
float rate = 400;

geometry_msgs::Twist getMessage(double linear_x, double angular_z)
{
    geometry_msgs::Twist msg;
    msg.linear.x = linear_x;
    msg.angular.z = angular_z;
    return msg;
}

class PoseCallback {
public:
    int turtle_idx;
    ros::Subscriber sub;
    turtlesim::Pose current_pose;

    void callback(const turtlesim::Pose::ConstPtr& msg)
    {
        cout << "turtle " << turtle_idx+1 << " " << msg->x << " " << msg->y << endl;
        current_pose = *msg;
    }
};


int main(int argc, char** argv)
{
    ros::init(argc, argv, "myturtle_control");
    ros::NodeHandle h;
    ros::Publisher pub[10];
    PoseCallback sub[10];

    int n_turtle = atoi(argv[1]);
    cout << "n_turtle = " << n_turtle << endl;
    
    for (int i = 0; i < n_turtle; i++) {
        stringstream s;
        s << "turtle" << i+1;
        string name = s.str();

        pub[i] = h.advertise<geometry_msgs::Twist>(name + "/cmd_vel", 1000);
        sub[i].turtle_idx = i;
        sub[i].sub = h.subscribe(name+"/pose", 1000, &PoseCallback::callback, &sub[i]);
        cout << "subcribe turtle " << i << " to " << name << "/pose" << endl;
    }

    for (int i=0;  i< n_turtle-1; i++){
        ros::service::waitForService("spawn");
        ros::ServiceClient spawner = h.serviceClient<turtlesim::Spawn>("spawn");
        turtlesim::Spawn turtle;
        turtle.request.x = rand() % 12;
        turtle.request.y = rand() % 12;
        turtle.request.theta = 0;
        spawner.call(turtle);
    }
    ros::Rate loopRate(rate);

    for (int i = 2; i < argc; i+=2) 
    {
        double x0 = atof(argv[i]), y0 = atof(argv[i+1]);
        double x1 = 5.54444 , y1 = 5.544444;
        const double tolerance = 1e-2;
        double  kcmin = 1000000;

        for (int j = 0; j < n_turtle; j++)
        {
            double distance = sqrt( pow(x0-sub[j].current_pose.x, 2) + pow(y0-sub[j].current_pose.y, 2) );
            if (distance < kcmin)
            {
                kcmin = distance;
            }
        }
        for(int idx = 0; idx < n_turtle; idx++)
        {
            double kc = sqrt( pow(x0-sub[idx].current_pose.x, 2) + pow(y0-sub[idx].current_pose.y, 2) );
            if (kc == kcmin)
            {


                while (ros::ok())
                {
                    
                    loopRate.sleep();
                    ros::spinOnce();
                    double kc = sqrt( pow(x0-sub[idx].current_pose.x, 2) + pow(y0-sub[idx].current_pose.y, 2) );
                    
                        if (kc < tolerance ) {
                            pub[idx].publish(getMessage(0,0));
                            break;
                        }
                        double dx = x0 - sub[idx].current_pose.x, dy = y0 - sub[idx].current_pose.y, 
                        theta = sub[idx].current_pose.theta;
                        double dalpha = asin ((cos(theta)*dy-sin(theta)*dx) / kc); 
                      float agb = acos((cos(theta)*dx+sin(theta)*dy)/kc);
                      double a;
                      if (agb < PI/2) {a = 1;}
                      else {a = -1;}
                      geometry_msgs::Twist msg = getMessage(min(4*kc, 4.0)*a*4,a*16*dalpha);
                      pub[idx].publish(msg);
                       }
                }
            
           }
        x1 = x0;
        y1 = y0;

    }
    return 0;
}
